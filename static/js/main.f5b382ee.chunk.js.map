{"version":3,"sources":["theme.ts","components/AppContainer.tsx","components/Error.tsx","components/Loading.tsx","config.ts","store/QuizProvider.tsx","hooks/useQuiz.ts","components/Button.tsx","components/ControlLabel.tsx","components/Done.tsx","components/AnswerIndicator.tsx","components/Answer.tsx","components/Question.tsx","components/Quiz.tsx","hooks/useQuestions.ts","components/Select.tsx","components/CategorySelector.tsx","components/DifficultySelector.tsx","components/QuantitySelector.tsx","components/QuizControls.tsx","components/Score.tsx","components/QuizHeader.tsx","App.tsx","hooks/useCategories.ts","serviceWorker.ts","index.tsx","store/quiz.ts"],"names":["screenMins","media","literals","css","theme","accent","goldCrayola","lemonMeringue","teaGreen","darkSeaGreen","greyAccent20","label60","lemonMeringue90","AppContainer","styled","div","spin","keyframes","Spinner","LoadingContainer","Loading","getConfig","config","apiUrl","process","categoryApiUrl","maxQuestions","Number","Object","entries","k","undefined","Error","QuizContext","createContext","QuizProvider","children","useState","quizStore","questionStore","Provider","value","useQuiz","store","useContext","Button","button","ControlLabel","label","DoneContainer","Message","Done","stop","quiz","resetQuiz","action","score","questions","replace","categoryId","currentQuestion","error","loading","ready","quantity","onClick","Indicator","Correct","Incorrect","AnswerIndicator","answer","question","correct_answer","AnswerCard","Answer","reveal","setReveal","answerQuestion","fromBase64","QuestionTitle","h1","QuestionContainer","observer","advanceQuiz","nextButtonLabel","length","randomisedAnswers","map","ans","key","useEffect","fetchQuestions","flow","axios","get","category","difficulty","encodeURIComponent","results","data","message","useQuestions","Select","select","label90","CategorySelector","categories","runInAction","id","setCategory","evt","target","htmlFor","onChange","cat","name","DifficultySelector","setDifficultyLevel","QuantityInput","input","setQuantity","handleChange","n","isNaN","type","inputMode","pattern","autoComplete","ControlsContainer","QuizControls","start","ScoreContainer","span","Remaining","Header","header","Subtitle","QuizHeader","App","setCategories","setError","setLoading","a","trivia_categories","fetchCategories","useCategories","quizVisible","setQuizVisible","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","console","s","Buffer","from","toString","observable","this","answers","incorrect_answers","i","j","Math","floor","random","temp"],"mappings":"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","file":"static/js/main.f5b382ee.chunk.js","sourcesContent":["import { css } from \"styled-components\";\n\nconst screenMins = {\n  mobile: 320,\n  tablet: 481,\n  laptop: 769,\n  desktop: 1025,\n  wide: 1201,\n};\n\n// And yes, the intense creativity of https://coolors.co/fe5d26-f2c078-faedca-c1dbb3-7ebc89 is in\n// use, and not my dashingly brilliant sense of colour...\nconst theme = {\n  // base\n  accent: \"#FE5D26\", // \"international orange aerospace\", apparently\n  goldCrayola: \"#F2C078\",\n  lemonMeringue: \"#FAEDCA\",\n  teaGreen: \"#C1DBB3\",\n  darkSeaGreen: \"#7EBC89\",\n\n  // util\n  greyAccent20: \"#00000033\",\n  label60: \"#00000099\",\n  lemonMeringue90: \"#FAEDCAF2\",\n};\n\n// https://github.com/styled-components/styled-components/blob/master/packages/styled-components/docs/tips-and-tricks.md\nexport const media = {\n  mobile: (literals: TemplateStringsArray) => css`\n    @media (max-width: ${screenMins.tablet - 1}px) {\n      ${css(literals)}\n    }\n  `,\n  tablet: (literals: TemplateStringsArray) => css`\n    @media (max-width: ${screenMins.laptop - 1}px) {\n      ${css(literals)}\n    }\n  `,\n  laptop: (literals: TemplateStringsArray) => css`\n    @media (max-width: ${screenMins.desktop - 1}px) {\n      ${css(literals)}\n    }\n  `,\n  desktop: (literals: TemplateStringsArray) => css`\n    @media (max-width: ${screenMins.wide - 1}px) {\n      ${css(literals)}\n    }\n  `,\n  wide: (literals: TemplateStringsArray) => css`\n    @media (min-width: ${screenMins.wide}px) {\n      ${css(literals)}\n    }\n  `,\n};\n\nexport default theme;\n","import styled from \"styled-components\";\nimport { media } from \"../theme\";\n\nconst AppContainer = styled.div`\n  margin: 0 1rem;\n  ${media.tablet`margin: 0 2rem;`}\n  ${media.laptop`margin: 0 3rem;`}\n  ${media.desktop`margin: 0 4rem;`}\n  ${media.wide`margin: 0 5rem;`}\n`;\n\nexport default AppContainer;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  color: red;\n`;\n","import React, { FC } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst spin = keyframes`\n  0% {\n    top: 36px;\n    left: 36px;\n    width: 0;\n    height: 0;\n    opacity: 1;\n  }\n  100% {\n    top: 0px;\n    left: 0px;\n    width: 72px;\n    height: 72px;\n    opacity: 0;\n  }\n`;\n\n// Credit: adapted from https://loading.io/css/\nconst Spinner = styled.div`\n  display: flex;\n  position: relative;\n  width: 80px;\n  height: 80px;\n  align-self: center;\n\n  & div {\n    position: absolute;\n    border: 4px solid #000;\n    opacity: 1;\n    border-radius: 50%;\n    animation: ${spin} 1s cubic-bezier(0, 0.2, 0.8, 1) infinite;\n  }\n\n  & div:nth-child(2) {\n    animation-delay: -0.5s;\n  }\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem;\n`;\n\nconst Loading: FC = () => (\n  <LoadingContainer>\n    <Spinner>\n      <div></div>\n      <div></div>\n    </Spinner>\n  </LoadingContainer>\n);\n\nexport default Loading;\n","export interface ClientConfig {\n  apiUrl: string;\n  categoryApiUrl: string;\n  maxQuestions: number;\n}\n\nexport const getConfig = (): ClientConfig => {\n  const config: ClientConfig = {\n    apiUrl: process.env.REACT_APP_API_URL!,\n    categoryApiUrl: process.env.REACT_APP_CATEGORY_API_URL!,\n    maxQuestions: Number(process.env.REACT_APP_MAX_QUESTIONS!),\n  };\n\n  for (const [k, v] of Object.entries(config)) {\n    if (v === undefined) {\n      throw new Error(`${k} must be defined.`);\n    }\n  }\n\n  return config;\n};\n\nexport default getConfig();\n","import React, { createContext, FC, useState } from \"react\";\nimport quizStore, { QuizStore } from \"./quiz\";\n\nexport const QuizContext = createContext<QuizStore | undefined>(undefined);\n\nconst QuizProvider: FC = ({ children }) => {\n  const [questionStore] = useState<QuizStore>(quizStore);\n\n  return (\n    <QuizContext.Provider value={questionStore}>\n      {children}\n    </QuizContext.Provider>\n  );\n};\n\nexport default QuizProvider;\n","import { useContext } from \"react\";\nimport { QuizStore } from \"../store/quiz\";\nimport { QuizContext } from \"../store/QuizProvider\";\n\nexport const useQuiz = (): QuizStore => {\n  const store = useContext(QuizContext);\n  if (!store) {\n    throw Error(\"<QuizProvider> isn't providing a valid store.\");\n  }\n\n  return store;\n};\n","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  background-color: ${({ theme }) => theme.lemonMeringue};\n  border: 0.2rem solid ${({ theme }) => theme.darkSeaGreen};\n  border-radius: 1rem;\n  font-size: 1.5rem;\n  padding: 0.5rem;\n  font-weight: bold;\n  color: ${({ theme }) => theme.label60};\n  width: fit-content;\n  align-self: center;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.lemonMeringue90};\n  }\n`;\n\nexport default Button;\n","import styled from \"styled-components\";\n\nconst ControlLabel = styled.label`\n  font-weight: bold;\n  font-size: 1.2rem;\n`;\n\nexport default ControlLabel;\n","import { action } from \"mobx\";\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport Button from \"./Button\";\nimport ControlLabel from \"./ControlLabel\";\n\nconst DoneContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 2rem;\n`;\n\nconst Message = styled.div`\n  background-color: ${({ theme }) => theme.lemonMeringue};\n  border-radius: 1rem;\n  padding: 1rem;\n  margin: 1rem;\n`;\n\ninterface DoneProps {\n  stop(): void;\n}\n\nconst Done: FC<DoneProps> = ({ stop }) => {\n  const quiz = useQuiz();\n\n  const resetQuiz = action(() => {\n    quiz.score = 0;\n    quiz.questions.replace([]);\n    quiz.categoryId = 0;\n    quiz.currentQuestion = 0;\n    quiz.error = undefined;\n    quiz.loading = false;\n    quiz.ready = false;\n    stop();\n  });\n\n  return (\n    <DoneContainer>\n      <Message>\n        <ControlLabel>Results</ControlLabel>\n        <p>\n          You scored {quiz.score} of a possible {quiz.quantity}. Nice work!\n        </p>\n        <p>\n          If you got most of the questions right, then \"Nice work!\" was\n          completely sincere.\n        </p>\n        <p>If not, then a little gentle sarcasm is implied.</p>\n      </Message>\n      <Button onClick={resetQuiz}>Go again</Button>\n    </DoneContainer>\n  );\n};\n\nexport default Done;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\n\ninterface AnswerIndicatorProps {\n  answer: string;\n}\n\nconst Indicator = styled.div`\n  width: 3rem;\n  height: 3rem;\n  border-radius: 50%;\n  border: 0.1rem solid ${({ theme }) => theme.goldCrayola};\n  background-color: ${({ theme }) => theme.lemonMeringue};\n  font-weight: bold;\n  font-size: 1.5rem;\n  position: absolute;\n  top: 0.5rem;\n  right: 1rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Correct = styled(Indicator)`\n  color: ${({ theme }) => theme.darkSeaGreen};\n`;\n\nconst Incorrect = styled(Indicator)`\n  color: ${({ theme }) => theme.accent};\n`;\n\nconst AnswerIndicator: FC<AnswerIndicatorProps> = ({ answer }) => {\n  const { question } = useQuiz();\n  return answer === question.correct_answer ? (\n    <Correct>✓</Correct>\n  ) : (\n    <Incorrect>✗</Incorrect>\n  );\n};\n\nexport default AnswerIndicator;\n","import { action } from \"mobx\";\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport { fromBase64 } from \"../store/quiz\";\nimport AnswerIndicator from \"./AnswerIndicator\";\n\nconst AnswerCard = styled.div`\n  min-height: 4rem;\n  width: 100%;\n  background-color: ${({ theme }) => theme.darkSeaGreen};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  padding: 0.5rem;\n  border-radius: 1rem;\n  margin: 1rem;\n  color: #fff;\n  font-weight: bold;\n  font-size: 1.1rem;\n`;\n\ninterface AnswerProps {\n  answer: string;\n  reveal: boolean;\n  setReveal(x: boolean): void;\n}\n\nconst Answer: FC<AnswerProps> = ({ answer, reveal, setReveal }) => {\n  const quiz = useQuiz();\n\n  const answerQuestion = action((answer: string) => {\n    if (answer === quiz.question.correct_answer) {\n      quiz.score += 1;\n    }\n    setReveal(true);\n  });\n\n  return (\n    <AnswerCard onClick={() => answerQuestion(answer)}>\n      {reveal && <AnswerIndicator answer={answer} />}\n      {fromBase64(answer)}\n    </AnswerCard>\n  );\n};\n\nexport default Answer;\n","import { action } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { FC, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport { fromBase64 } from \"../store/quiz\";\nimport Answer from \"./Answer\";\nimport Button from \"./Button\";\n\nconst QuestionTitle = styled.h1`\n  font-size: 1.1rem;\n`;\n\nconst QuestionContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst Question: FC = () => {\n  const [reveal, setReveal] = useState(false);\n  const quiz = useQuiz();\n\n  const advanceQuiz = action(() => {\n    setReveal(false);\n    quiz.currentQuestion += 1;\n  });\n\n  const nextButtonLabel =\n    quiz.currentQuestion === quiz.questions.length - 1\n      ? \"Finish\"\n      : \"Next Question\";\n\n  return (\n    <QuestionContainer>\n      <QuestionTitle>{fromBase64(quiz.question.question)}</QuestionTitle>\n      {quiz.randomisedAnswers.map((ans) => (\n        <Answer key={ans} answer={ans} reveal={reveal} setReveal={setReveal} />\n      ))}\n      {reveal && <Button onClick={advanceQuiz}>{nextButtonLabel}</Button>}\n    </QuestionContainer>\n  );\n};\n\nexport default observer(Question);\n","import { observer } from \"mobx-react-lite\";\nimport React, { FC } from \"react\";\nimport { useQuestions } from \"../hooks/useQuestions\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport Done from \"./Done\";\nimport Error from \"./Error\";\nimport Loading from \"./Loading\";\nimport Question from \"./Question\";\n\ninterface QuizProps {\n  stop(): void;\n}\n\nconst Quiz: FC<QuizProps> = ({ stop }) => {\n  useQuestions();\n  const { currentQuestion, error, loading, questions } = useQuiz();\n\n  if (error) {\n    return <Error>{error.message}</Error>;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return currentQuestion < questions.length ? (\n    <Question />\n  ) : (\n    <Done stop={stop} />\n  );\n};\n\nexport default observer(Quiz);\n","import axios from \"axios\";\nimport { flow } from \"mobx\";\nimport { useEffect } from \"react\";\nimport config from \"../config\";\nimport { QuestionDifficultyLevel } from \"../store/question\";\nimport { useQuiz } from \"./useQuiz\";\n\nconst buildRequestUrl = (\n  category: number,\n  difficulty: QuestionDifficultyLevel,\n  quantity: number\n): string =>\n  `${config.apiUrl}?amount=${encodeURIComponent(\n    quantity\n  )}&category=${encodeURIComponent(category)}&difficulty=${encodeURIComponent(\n    difficulty\n  )}&encode=base64`;\n\nexport const useQuestions = () => {\n  const quiz = useQuiz();\n\n  useEffect(() => {\n    const fetchQuestions = flow(function* () {\n      try {\n        quiz.loading = true;\n        const {\n          data: { results },\n        } = yield axios.get(\n          buildRequestUrl(quiz.categoryId, quiz.difficulty, quiz.quantity)\n        );\n        quiz.questions.replace(results);\n        quiz.ready = true;\n      } catch (e) {\n        quiz.error = Error(e.message);\n        quiz.ready = false;\n      } finally {\n        quiz.loading = false;\n      }\n    });\n\n    if (!quiz.categoryId) {\n      quiz.error = Error(\"No category provided.\");\n      return;\n    }\n\n    if (quiz.quantity < 1) {\n      quiz.error = Error(\"Have to answer at least one question.\");\n      return;\n    }\n\n    if (quiz.quantity > config.maxQuestions) {\n      quiz.error = Error(\n        `Sorry, you can only have ${config.maxQuestions} in a quiz.`\n      );\n      return;\n    }\n\n    if (!quiz.loading && !quiz.error && !quiz.ready) {\n      fetchQuestions();\n    }\n  }, [\n    quiz.categoryId,\n    quiz.difficulty,\n    quiz.error,\n    quiz.loading,\n    quiz.quantity,\n    quiz.questions,\n    quiz.ready,\n  ]);\n};\n","import styled from \"styled-components\";\n\nconst Select = styled.select`\n  font-weight: bold;\n  line-height: 1.3;\n  padding: 0.5rem 1rem;\n  margin: 1rem;\n  border: 0.1rem solid ${({ theme }) => theme.goldCrayola};\n  box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);\n  border-radius: 0.5em;\n  appearance: none;\n  background-color: ${({ theme }) => theme.teaGreen};\n  background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%2300000099%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E\"),\n    linear-gradient(\n      to bottom,\n      ${({ theme }) => theme.teaGreen} 0%,\n      ${({ theme }) => theme.darkSeaGreen} 100%\n    );\n  background-repeat: no-repeat, repeat;\n  background-position: right 0.7em top 50%, 0 0;\n  background-size: 0.65em auto, 100%;\n  color: ${({ theme }) => theme.label90};\n\n  &:hover {\n    border-color: ${({ theme }) => theme.accent};\n  }\n\n  &:focus {\n    border-color: ${({ theme }) => theme.lemonMeringue};\n    box-shadow: 0 0 1px 3px ${({ theme }) => theme.greyAccent20};\n    outline: none;\n  }\n\n  & option {\n    font-weight: normal;\n  }\n`;\n\nexport default Select;\n","import { action, runInAction } from \"mobx\";\nimport React, { FC } from \"react\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport { Category } from \"../store/category\";\nimport ControlLabel from \"./ControlLabel\";\nimport Select from \"./Select\";\n\ninterface CategorySelectorProps {\n  categories?: Category[];\n}\n\nconst CategorySelector: FC<CategorySelectorProps> = ({ categories }) => {\n  const quiz = useQuiz();\n  if (!quiz.categoryId && categories) {\n    runInAction(() => (quiz.categoryId = categories[0].id));\n  }\n\n  const setCategory = action((evt: any) => {\n    quiz.categoryId = Number(evt.target.value);\n  });\n\n  return (\n    <>\n      <ControlLabel htmlFor=\"triviaCategory\">\n        Choose a trivia category:\n      </ControlLabel>\n      <Select id=\"triviaCategory\" onChange={setCategory}>\n        {categories &&\n          categories.map((cat) => (\n            <option key={cat.id} value={cat.id}>\n              {cat.name}\n            </option>\n          ))}\n      </Select>\n    </>\n  );\n};\n\nexport default CategorySelector;\n","import { action } from \"mobx\";\nimport React, { FC } from \"react\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport ControlLabel from \"./ControlLabel\";\nimport Select from \"./Select\";\n\nconst DifficultySelector: FC = () => {\n  const quiz = useQuiz();\n\n  const setDifficultyLevel = action((evt: any) => {\n    quiz.difficulty = evt.target.value;\n  });\n\n  return (\n    <>\n      <ControlLabel htmlFor=\"difficulty\">Select difficulty level:</ControlLabel>\n      <Select id=\"difficulty\" onChange={setDifficultyLevel}>\n        <option key=\"easy\" value=\"easy\">\n          Easy\n        </option>\n        <option key=\"medium\" value=\"medium\">\n          Medium\n        </option>\n        <option key=\"hard\" value=\"hard\">\n          Hard\n        </option>\n      </Select>\n    </>\n  );\n};\n\nexport default DifficultySelector;\n","import { action } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { FC, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\nimport ControlLabel from \"./ControlLabel\";\n\nconst QuantityInput = styled.input`\n  margin: 1rem;\n  padding: 0.5rem 1rem;\n  line-height: 1.3;\n  font-weight: bold;\n  border: 0.1rem solid ${({ theme }) => theme.goldCrayola};\n  box-shadow: 0 1px 0 1px rgba(0, 0, 0, 0.04);\n  border-radius: 0.5em;\n  appearance: none;\n  background-color: ${({ theme }) => theme.teaGreen};\n  color: ${({ theme }) => theme.label90};\n\n  &:hover {\n    border-color: ${({ theme }) => theme.accent};\n  }\n\n  &:focus {\n    border-color: ${({ theme }) => theme.lemonMeringue};\n    box-shadow: 0 0 1px 3px ${({ theme }) => theme.greyAccent20};\n    outline: none;\n  }\n`;\n\nconst QuantitySelector: FC = () => {\n  const quiz = useQuiz();\n  const [quantity, setQuantity] = useState<string>(\"1\");\n\n  const handleChange = action((evt: any) => {\n    setQuantity(evt.target.value);\n    let n = Number(evt.target.value);\n    if (isNaN(n) || n < 1) {\n      n = 1;\n    }\n    quiz.quantity = n;\n  });\n\n  return (\n    <>\n      <ControlLabel htmlFor=\"questionQuantity\">\n        How many questions would you like?\n      </ControlLabel>\n      <QuantityInput\n        id=\"questionQuantity\"\n        type=\"text\"\n        inputMode=\"numeric\"\n        onChange={handleChange}\n        value={quantity}\n        pattern=\"[0-9]*\"\n        autoComplete=\"one-time-code\"\n      />\n    </>\n  );\n};\n\nexport default observer(QuantitySelector);\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { Category } from \"../store/category\";\nimport Button from \"./Button\";\nimport CategorySelector from \"./CategorySelector\";\nimport DifficultySelector from \"./DifficultySelector\";\nimport QuantitySelector from \"./QuantitySelector\";\n\ninterface QuizControlsProps {\n  categories?: Category[];\n  start(): void;\n}\n\nconst ControlsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst QuizControls: FC<QuizControlsProps> = ({ categories, start }) => {\n  return (\n    <ControlsContainer>\n      <CategorySelector categories={categories} />\n      <QuantitySelector />\n      <DifficultySelector />\n      <Button onClick={start}>Start</Button>\n    </ControlsContainer>\n  );\n};\n\nexport default QuizControls;\n","import { observer } from \"mobx-react-lite\";\nimport React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport { useQuiz } from \"../hooks/useQuiz\";\n\nconst ScoreContainer = styled.span`\n  font-size: 1.2rem;\n  font-style: italic;\n  font-weight: bold;\n`;\n\nconst Number = styled.span`\n  color: ${({ theme }) => theme.accent};\n`;\n\nconst Remaining = styled.span`\n  margin: 0 1rem;\n  color: ${({ theme }) => theme.label90};\n`;\n\nconst Score: FC = () => {\n  const { currentQuestion, quantity, questions, score } = useQuiz();\n\n  return (\n    <ScoreContainer>\n      {questions.length > 0 && currentQuestion < quantity && (\n        <Remaining>Remaining: {quantity - currentQuestion}</Remaining>\n      )}\n      <Number>Score: {score}</Number>\n    </ScoreContainer>\n  );\n};\n\nexport default observer(Score);\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport Score from \"./Score\";\n\nconst Header = styled.header`\n  background-color: ${({ theme }) => theme.goldCrayola};\n  height: 3rem;\n  border-bottom: 0.2rem solid ${({ theme }) => theme.greyAccent20};\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  padding: 0 1rem;\n  color: ${({ theme }) => theme.label90};\n`;\n\nconst Subtitle = styled.span`\n  font-style: italic;\n  font-size: 0.8rem;\n  font-weight: normal;\n  margin-left: 0.5rem;\n`;\n\nconst QuizHeader: FC = () => (\n  <Header>\n    <h1>\n      GreenCards\n      <Subtitle>(Not the kind you're thinking of.)</Subtitle>\n    </h1>\n    <Score />\n  </Header>\n);\n\nexport default QuizHeader;\n","import React, { FC, useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport AppContainer from \"./components/AppContainer\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport Quiz from \"./components/Quiz\";\nimport QuizControls from \"./components/QuizControls\";\nimport QuizHeader from \"./components/QuizHeader\";\nimport { useCategories } from \"./hooks/useCategories\";\nimport QuizProvider from \"./store/QuizProvider\";\nimport theme from \"./theme\";\n\nconst App: FC = () => {\n  const { error, loading, categories } = useCategories();\n  const [quizVisible, setQuizVisible] = useState(false);\n\n  if (error) {\n    return <Error>{error}</Error>;\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <QuizProvider>\n        <QuizHeader />\n        <AppContainer>\n          {quizVisible ? (\n            <Quiz stop={() => setQuizVisible(false)} />\n          ) : (\n            <QuizControls\n              categories={categories}\n              start={() => setQuizVisible(true)}\n            />\n          )}\n        </AppContainer>\n      </QuizProvider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport config from \"../config\";\nimport { Category } from \"../store/category\";\n\nlet categoryCache: Category[];\n\nexport const getCategories = () => {\n  if (!categoryCache) {\n    throw Error(\"Category cache is not populated.\");\n  }\n\n  return categoryCache;\n};\n\nexport const useCategories = () => {\n  const [categories, setCategories] = useState<Category[]>();\n  const [error, setError] = useState<Error>();\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        setLoading(true);\n        const { data } = await axios.get(config.categoryApiUrl);\n        setCategories(data.trivia_categories);\n        categoryCache = data.trivia_categories;\n      } catch (e) {\n        setError(Error(e.message));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCategories();\n  }, []);\n\n  return { categories, error, loading };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","import { IObservableArray, observable } from \"mobx\";\nimport { QuestionDifficultyLevel, QuestionType } from \"./question\";\n\nexport const fromBase64 = (s: string): string =>\n  Buffer.from(s, \"base64\").toString();\n\nexport interface QuizStore {\n  categoryId: number;\n  currentQuestion: number;\n  difficulty: QuestionDifficultyLevel;\n  error?: Error;\n  loading: boolean;\n  ready: boolean;\n  quantity: number;\n  questions: IObservableArray<QuestionType>;\n  readonly question: QuestionType;\n  readonly randomisedAnswers: string[];\n  score: number;\n}\n\nconst quizStore = observable<QuizStore>({\n  categoryId: 0,\n  currentQuestion: 0,\n  difficulty: \"easy\",\n  error: undefined,\n  loading: false,\n  ready: false,\n  quantity: 1,\n  questions: observable<QuestionType>([]),\n  score: 0,\n  get question(): QuestionType {\n    return this.questions[this.currentQuestion];\n  },\n  get randomisedAnswers(): string[] {\n    const answers = [\n      this.questions[this.currentQuestion].correct_answer,\n      ...this.questions[this.currentQuestion].incorrect_answers,\n    ];\n\n    // See various sources, ostensibly via Knuth\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = answers[i];\n      answers[i] = answers[j];\n      answers[j] = temp;\n    }\n\n    return answers;\n  },\n});\n\nexport default quizStore;\n"],"sourceRoot":""}